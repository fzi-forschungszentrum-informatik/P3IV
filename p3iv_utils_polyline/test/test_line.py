# This file is part of the Interpolated Polyline (https://github.com/...),
# copyright by FZI Forschungszentrum Informatik, licensed under the BSD-3 license (see LICENSE file in main directory)


from p3iv_utils_polyline.visualization.plot_distance_contours import main as plot_distance_contours
import unittest
import numpy as np


class InterpolatedPolylineTest(unittest.TestCase):
    def test_straight_line_w_python_impl(self):
        from p3iv_utils_polyline.interpolated_polyline import InterpolatedPolyline

        o = np.array([[-2, 1], [0, 1], [2, 1]])
        ox = o[:, 0]
        oy = o[:, 1]
        obs_ip = InterpolatedPolyline(ox, oy)
        plot_distance_contours(o, obs_ip, offset=4.0, show=False)

        # test the distance at a MIDDLE-segment
        self.assertAlmostEqual(obs_ip.signed_distance(0.2, 2), 1)

        # test the distance at a line-to-line connection point
        self.assertAlmostEqual(obs_ip.signed_distance(0, 2), 1)

        # test the distance at the LAST-segment
        self.assertAlmostEqual(obs_ip.signed_distance(4, 3), 2 * 2 ** 0.5)

        # test the distance at the FIRST-segment
        self.assertAlmostEqual(obs_ip.signed_distance(-4, -1), -2 * 2 ** 0.5)

    def test_straight_line_w_pybind_impl(self):
        from p3iv_utils_polyline.py_interpolated_polyline import PyInterpolatedPolyline as InterpolatedPolyline

        o = np.array([[-2, 1], [0, 1], [2, 1]])
        ox = o[:, 0]
        oy = o[:, 1]
        obs_ip = InterpolatedPolyline(ox, oy)
        plot_distance_contours(o, obs_ip, offset=4.0, show=False)

        # test the distance at a MIDDLE-segment
        self.assertAlmostEqual(obs_ip.signed_distance(0.2, 2), 1)

        # test the distance at a line-to-line connection point
        self.assertAlmostEqual(obs_ip.signed_distance(0, 2), 1)

        # test the distance at the LAST-segment
        self.assertAlmostEqual(obs_ip.signed_distance(4, 3), 2 * 2 ** 0.5)

        # test the distance at the FIRST-segment
        self.assertAlmostEqual(obs_ip.signed_distance(-4, -1), -2 * 2 ** 0.5)


class InterpolatedPolylineRoundaboutOFCenterlineTest(unittest.TestCase):
    def get_centerline(self):
        centerline = np.array(
            [
                [1011.6220379824808, 958.2548811177717],
                [1011.4173262560216, 958.8237497281456],
                [1010.8735561939247, 960.0513334114486],
                [1010.5653446838551, 960.8186819373359],
                [1010.2699132761627, 961.569818229239],
                [1009.9034142049786, 962.5857442382264],
                [1009.4255150233512, 963.9937283052616],
                [1009.0680044315814, 964.8874432457524],
                [1008.8109787353605, 965.625283613456],
                [1008.4563496545306, 966.7232873021647],
                [1008.2260078109975, 967.4906795139214],
                [1007.8969361748605, 968.3539340352822],
                [1007.659388298227, 969.1203622715805],
                [1007.4654992432334, 969.7844017173679],
                [1007.2184149832756, 970.6382155383179],
                [1007.0264562053198, 971.3449073259709],
                [1006.8791877376207, 972.0467265239655],
                [1006.6613329831453, 972.8018517893058],
                [1006.4477955809562, 973.7044727217271],
                [1006.2590419940534, 974.4749808741876],
                [1006.1630597121548, 974.813249683926],
                [1005.9813645226532, 975.7205079379344],
                [1005.8014094672981, 976.5832936872529],
                [1005.7087169684528, 977.3895590343367],
                [1005.4227710178238, 978.5672482047012],
                [1005.3593639484316, 979.0248699614317],
                [1005.3534356335585, 979.1878578725057],
                [1005.3018494494609, 979.7226734745132],
                [1005.1737925390771, 980.4562045652608],
                [1005.1872676780913, 981.098497238946],
                [1005.1083342832571, 981.6959601086667],
                [1005.0271055754274, 982.0985106179389],
                [1005.0571302756434, 982.5716265242565],
                [1005.0889709223702, 982.8665385719021],
                [1005.0515286706504, 983.1060466292953],
                [1005.0548876857501, 983.1778702591027],
                [1004.9853294971399, 983.5273083341572],
                [1005.0120102271903, 983.7907231398092],
                [1004.9803554772807, 984.0916252610721],
                [1004.9973672512278, 984.3782003190963],
                [1005.0383486780047, 984.5796038494757],
                [1005.0687721713621, 984.6935915047993],
                [1005.0311917613144, 985.0028252499919],
                [1005.0556637856935, 985.1030607354319],
                [1005.3043702032883, 985.8798077873813],
                [1005.1165808488731, 987.5789022970596],
                [1005.1265715143818, 988.3372665178362],
                [1005.5222537984082, 989.0258293816632],
                [1005.7103415082383, 990.5080026837056],
                [1006.3446438694082, 991.2996576330042],
                [1006.6454578388657, 992.2762630272816],
                [1007.0809647079441, 992.9938330639419],
                [1007.177889229235, 993.0840545694468],
                [1007.3260264113778, 993.2997318551179],
                [1007.5133585945005, 993.4794632345545],
                [1008.3466329313233, 995.0031135974912],
                [1008.7534390127403, 995.5435735448234],
                [1009.083002145635, 996.3479825986751],
                [1009.3817432733777, 996.8798821879236],
                [1009.5790747148567, 997.5717715095832],
                [1009.7564535234415, 998.352502528953],
                [1010.0422140110459, 999.1036895020484],
                [1010.136160150927, 999.8140557838327],
                [1010.2631252738938, 1000.6075676879339],
                [1010.3403920646524, 1001.4176739293766],
                [1010.372477108438, 1002.1571688549304],
                [1010.3354094934766, 1002.9602666054618],
                [1010.2758912281424, 1003.7403747718879],
                [1010.220612696954, 1004.2397827440085],
                [1010.1419212199398, 1004.9712978734901],
                [1009.9717245921493, 1005.4215081685647],
                [1009.5549091241264, 1007.0520320831858],
                [1009.51441855132, 1007.192098616712],
                [1009.2187605133222, 1007.72179997084],
                [1008.7292258036614, 1008.2330589248301],
                [1007.9077773090394, 1009.4250770314004],
                [1007.442486953747, 1009.9910734921452],
                [1006.8078839674417, 1010.6473263238433],
                [1006.1950634207169, 1011.1736700455194],
                [1005.5712928185822, 1011.6885870769511],
                [1004.844536209479, 1012.1371788900062],
                [1004.1376917893067, 1012.5298933443038],
                [1003.3379768066807, 1012.8553217963786],
                [1002.6168382543256, 1013.0901659208748],
                [1001.8451338131854, 1013.3330492541769],
                [1001.2092121418391, 1013.5331407857195],
                [1000.4010559116432, 1013.7242663224847],
                [999.596330179018, 1013.807296577306],
                [998.6145982988819, 1013.8505116787585],
                [997.8778939824551, 1013.7740167771938],
                [997.0772078138834, 1013.694374572286],
                [997.0733501789509, 1013.6937691746971],
                [996.5193992889253, 1013.5707891310856],
                [996.0674796855019, 1013.4729645540383],
                [995.1625479275535, 1013.2748322099162],
                [994.683867600892, 1013.1504126677091],
                [994.42163191078, 1013.1000335937488],
                [994.194293029519, 1013.0314852362883],
                [993.7278881584352, 1012.9093068958582],
                [993.397273840179, 1012.8090119689715],
                [993.205620946479, 1012.6886542471891],
                [993.0005020392127, 1012.6395170856948],
                [992.733091832546, 1012.5446898675598],
                [991.989037747815, 1012.4734186466633],
                [991.3315668691939, 1012.4593509542117],
                [986.4096202385554, 1014.6018174261334],
                [984.2881294959225, 1014.76731673884],
                [984.2575761590269, 1014.7870764726028],
                [983.5545108087244, 1015.0558549890993],
                [983.1428294201032, 1015.2261551940135],
                [983.0055808899342, 1015.2773356350862],
                [982.6522564031766, 1015.4401759509165],
                [982.5616175583564, 1015.4911949578602],
            ]
        )
        return centerline

    def test_w_python_impl(self):
        from p3iv_utils_polyline.interpolated_polyline import InterpolatedPolyline

        centerline = self.get_centerline()
        xs = centerline[:, 0]
        ys = centerline[:, 1]
        ip = InterpolatedPolyline(xs, ys)
        plot_distance_contours(centerline, ip, offset=10.0, distance_bound=10, show=False)

    def test_w_pybind_impl(self):
        from p3iv_utils_polyline.py_interpolated_polyline import PyInterpolatedPolyline as InterpolatedPolyline

        centerline = self.get_centerline()
        xs = centerline[:, 0]
        ys = centerline[:, 1]
        ip = InterpolatedPolyline(xs, ys)
        plot_distance_contours(centerline, ip, offset=10.0, distance_bound=10, show=False)


if __name__ == "__main__":
    unittest.main()
